{"version":3,"sources":["App.js","index.js"],"names":["App","props","comparator","a","b","state","u_type1","u_type2","u_type3","calculateGain","charInfo","original_memo","nodes_in_best_paths","map","path","path_gain","new_nodes_in_path","filter","nodeId","remaining_values","ATTACK","DEFENSE","HP","forEach","enhancementType","effectValue","Object","entries","type","value","length","addBestBranch","memo","path_was_added","sort","values","reduce","countArrayEntriesNotInObject","u_tiles","p","data","makeMap","id","tiles","u_id","best_path","handleChange","bind","handleSubmit","handleKeyPress","colours","dep","starts","key","sub","start","enhancementCellList","val","charaEnhancementCellId","pointX","pointY","keys","obj","array","c","this","weight_and_memo","chosen_path","memory","connectedCellIdList","c_id","find_paths","JSON","stringify","path_to_value","node","push","event","target","setState","name","e","parseInt","u_type","lines","borderColor","borderStyle","borderWidth","x0","y0","x1","y1","Y","X","colour","styleTop","position","left","top","borderBottomColor","styleMid","backgroundColor","textAlign","styleBot","borderTopColor","style","className","includes","createLines","boxes","createBox","opts","onChange","options","onKeyPress","createBoxes","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63889b64.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from 'react-lineto';\nimport data from './data/charaCard.json';\nimport \"./App.css\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: this.makeMap(data),\n      id: 3031,\n      tiles: 60,\n      type: \"ATTACK\",\n      u_id: 3031,\n      u_tiles: 60,\n      u_type1: \"ATTACK\",\n      u_type2: \"DEFENSE\",\n      u_type3: \"DEFENSE\",\n      nodes_in_best_paths: {},\n    };\n    this.state.nodes_in_best_paths = this.best_path(3031, \"ATTACK\", 60)\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n\n    this.colours = {\n      \"DEFENSE\": {[false]:\"#ccffff\", [true]:\"#00ccff\"},\n      \"HP\": {[false]:\"#936262\", [true]:\"#f00000\"},\n      \"ATTACK\": {[false]:\"#c8bf84\", [true]:\"#ffd22e\"},\n      \"START\": {[false]:\"#000000\", [true]:\"#000000\"},\n    }\n  }\n\n  makeMap (data) {\n    let dep = {};\n    let starts = {};\n    for (let [key, value] of Object.entries(data)) {\n      let sub = {};\n      let start = 0;\n\n      for (let val of Object.values(value.enhancementCellList)) {\n        sub[val.charaEnhancementCellId] = {\n          ...val, \n          pointX: 100 + (val.pointX-1196) / 2 || 0,\n          pointY: 200 + (val.pointY-1048) / 3 || 0\n        }\n\n        if (val.enhancementType === \"START\") {\n          start = val.charaEnhancementCellId\n        }\n      }\n\n      if (Object.keys(sub).length !== 0){\n        dep[key] = sub\n        starts[key] = start\n      }\n    }\n   \n    return {dep, starts};\n  }\n\n  comparator = (a, b) => {\n    if (a[0][this.state.u_type1] < b[0][this.state.u_type1]) return 1;\n    if (a[0][this.state.u_type1] > b[0][this.state.u_type1]) return -1;\n    if (a[0][this.state.u_type2] < b[0][this.state.u_type2]) return 1;\n    if (a[0][this.state.u_type2] > b[0][this.state.u_type2]) return -1;\n    if (a[0][this.state.u_type3] < b[0][this.state.u_type3]) return 1;\n    if (a[0][this.state.u_type3] > b[0][this.state.u_type3]) return -1;\n    return 0;\n  }\n\n  countArrayEntriesNotInObject (obj, array) {\n    let c = 0\n    for (let n of array) {\n      c += !obj[n]\n    }\n    return c;\n  }\n\n  calculateGain = (charInfo, original_memo, nodes_in_best_paths) => {\n    const balanced_memo = original_memo.map(path => {\n      const path_gain = {}\n      const new_nodes_in_path = path.filter(nodeId => !nodes_in_best_paths[nodeId])\n      const remaining_values = {ATTACK: 0, DEFENSE: 0, HP: 0}\n      new_nodes_in_path.forEach(nodeId => {\n        remaining_values[charInfo[nodeId].enhancementType] = (charInfo[nodeId].effectValue || 0)\n      });\n      Object.entries(remaining_values).map(([type, value]) => {path_gain[type] = value / new_nodes_in_path.length})\n      return [path_gain, path]\n    })\n    return balanced_memo\n  } \n\n  addBestBranch = (memo, nodes_in_best_paths) => {\n    let path_was_added \n    for (let [_, path] of memo.sort(this.comparator)) {\n      if (Object.values(nodes_in_best_paths).reduce((a, b) => a + b, 0) + this.countArrayEntriesNotInObject(nodes_in_best_paths, path) <= this.state.u_tiles + 1) {\n        path_was_added = false \n        for (let p of path) {\n          if(!nodes_in_best_paths[p]) {\n            path_was_added = true\n            nodes_in_best_paths[p] = true\n          }\n        }\n        if(path_was_added) {\n          return path;\n        }\n      }\n    }\n    return false;\n  }\n\n  best_path (id, type) {        \n    if (!this.state.data.dep[id]) return \"Not defined\"\n    let memory = []\n    const nodes_in_best_paths = {[this.state.data.starts[id]]: true}   \n\n    for (let c_id of this.state.data.dep[id][this.state.data.starts[id]].connectedCellIdList) {\n      this.find_paths(id, c_id, type, memory, nodes_in_best_paths, []);\n    }\n\n    let weight_and_memo, chosen_path_string, chosen_path\n    while (true) {\n      weight_and_memo = this.calculateGain(this.state.data.dep[id], memory, nodes_in_best_paths)\n      chosen_path = this.addBestBranch(weight_and_memo, nodes_in_best_paths)\n      if(!chosen_path) break;\n      chosen_path_string = JSON.stringify(chosen_path.sort())\n      memory = memory.filter(path_to_value => {\n        for (const nodeId of path_to_value) {\n          if(!nodes_in_best_paths[nodeId]){\n            return true\n          }\n        }\n        return false\n      })\n    } \n        \n    return nodes_in_best_paths;\n  }\n\n  find_paths (id, node, type, memo, nodes_in_best_paths, path=[]) {\n    let obj = this.state.data.dep[id][node];\n    if(!obj) return;\n    nodes_in_best_paths[node] = false\n\n    path = [...path, node]\n    memo.push(path)\n\n    if (obj.connectedCellIdList) {\n      for (let c_id of obj.connectedCellIdList) {\n        this.find_paths(id, c_id, type, memo, nodes_in_best_paths, path);\n      }\n    }\n  }\n\n  handleChange(event) {\n    if (event.target.type === \"select-one\"){\n      try{\n        this.setState({\n          [event.target.name]: event.target.value\n        }, () => this.handleSubmit(null));\n      } catch (e) { }\n    } else {\n       this.setState({[event.target.name]: event.target.value ? parseInt(event.target.value) : \"\"});\n    }\n  }\n\n  handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      this.handleSubmit(null);\n    }\n  }\n\n  handleSubmit(event) {\n    if(this.state.data.dep[this.state.u_id]) {\n      this.setState({id: this.state.u_id, type: this.state.u_type, tiles: this.state.u_tiles, nodes_in_best_paths: this.best_path(this.state.u_id, this.state.u_type)})\n    } else {\n      this.setState({u_id: \"invalid\"})\n    }\n    //event.preventDefault();\n  }\n\n  createLines(key) {\n    const lines = []\n    let obj = this.state.data.dep[this.state.id][key];\n    \n    if (obj.connectedCellIdList) {\n      for (let c_id of obj.connectedCellIdList) {\n        if(!this.state.data.dep[this.state.id][c_id]) continue;\n        lines.push(<Line key={`${key}-${c_id}`} \n          borderColor={this.state.nodes_in_best_paths[c_id] ? \"#ff0000\": \"#723131\"}\n          borderStyle={this.state.nodes_in_best_paths[c_id] ? \"solid\": \"dashed\"}\n          borderWidth={2}\n          x0={obj.pointX + 26} \n          y0={obj.pointY + 15} \n          x1={this.state.data.dep[this.state.id][c_id].pointX + 26} \n          y1={this.state.data.dep[this.state.id][c_id].pointY + 15} \n        />)\n      }\n    }\n    return lines;\n  }\n\n  createBox(Y, X, key) { \n    const node = this.state.data.dep[this.state.id][key]\n    let colour = (this.colours[node.enhancementType]|| {[false]:\"#efe0f0\", [true]:\"#f99eff\"})[this.state.nodes_in_best_paths[key]] \n    const styleTop = {\n      position: \"absolute\",\n      left: X + \"px\",\n      top: Y - 15 + \"px\",\n      borderBottomColor: colour,\n    }\n    const styleMid = {\n      position: \"absolute\",\n      left: X + \"px\",\n      top: Y + \"px\",\n      backgroundColor: colour,\n      textAlign: \"center\"\n    }\n    const styleBot = {\n      position: \"absolute\",\n      left: X + \"px\",\n      top: Y + 30 + \"px\",\n      borderTopColor: colour,\n    }\n    return (\n      <div key={key}>\n        <div\n          style={styleTop}\n          className=\"hexagon-top\"\n        />      \n        <div\n        style={styleMid}\n        className=\"hexagon\"\n        >\n          {node.enhancementType !== \"SKILL\" && !node.enhancementType.includes(\"DISK\") ? node.effectValue : \"\"}\n        </div>      \n        <div\n        style={styleBot}\n        className=\"hexagon-bot\"\n        />\n        {this.createLines(key)}\n      </div>\n    );\n  };\n\n  createBoxes () {\n    const boxes = []\n    for (let [key, value] of Object.entries(this.state.data.dep[this.state.id])) {\n      boxes.push(\n        this.createBox(value.pointY, value.pointX, key)\n      )\n    }\n    return boxes;\n  }\n\n  options() {\n    const opts = []\n    for (let id of Object.keys(this.state.data.starts)){\n      opts.push(<option key={id} value={id}>{id}</option>)\n    }\n    return opts;\n  }\n\n  render() {\n    return (\n      <div>\n          <label>\n            ID:\n            <select \n              type=\"select\" \n              name=\"u_id\"\n              value={this.state.u_id} \n              onChange={this.handleChange}\n            >\n              {this.options()}\n            </select>\n          </label>\n          <label>\n            Primary Type:\n            <select \n              value={this.state.u_type1} \n              onChange={this.handleChange}\n              name=\"u_type1\"\n            >\n              <option value=\"ATTACK\">Attack</option>\n              <option value=\"HP\">HP</option>\n              <option value=\"DEFENSE\">Defense</option>\n            </select>\n          </label>\n          <label>\n            Secondary Type:\n            <select \n              value={this.state.u_type2} \n              onChange={this.handleChange}\n              name=\"u_type2\"\n            >\n              {this.state.u_type1 !== \"ATTACK\" && <option value=\"ATTACK\">Attack</option>}\n              {this.state.u_type1 !== \"HP\" && <option value=\"HP\">HP</option>}\n              {this.state.u_type1 !== \"DEFENSE\" && <option value=\"DEFENSE\">Defense</option>}\n            </select>\n          </label>\n          <label>\n            Tertiary Type:\n            <select \n              value={this.state.u_type3} \n              onChange={this.handleChange}\n              name=\"u_type3\"\n            >\n              {this.state.u_type1 !== \"ATTACK\" && this.state.u_type2 !== \"ATTACK\" && <option value=\"ATTACK\">Attack</option>}\n              {this.state.u_type1 !== \"HP\" && this.state.u_type2 !== \"HP\" && <option value=\"HP\">HP</option>}\n              {this.state.u_type1 !== \"DEFENSE\" && this.state.u_type2 !== \"DEFENSE\" && <option value=\"DEFENSE\">Defense</option>}\n            </select>\n          </label>\n          <label>\n            Tiles:\n            <input \n              name=\"u_tiles\"\n              type=\"number\" \n              value={this.state.u_tiles} \n              onChange={this.handleChange}\n              onKeyPress={this.handleKeyPress}\n            />\n          </label>\n          <label>\n            Free:\n            {this.state.tiles - Object.values(this.state.nodes_in_best_paths).reduce((a, b) => a + b, 0) + 1} \n          </label>\n        <div className=\"boxContainer\">\n          <div className=\"innerBox\">\n            {this.createBoxes()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}