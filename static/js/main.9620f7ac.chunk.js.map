{"version":3,"sources":["App.js","index.js"],"names":["App","props","optimal_path","girl_id","state","u_id","girl_se","data","dep","start","performance","now","nodes_in_best_paths","console","log","u_tiles","u_type1","u_type2","u_type3","parents","possible_best_paths","special_nodes","starts","connectedCellIdList","c_id","find_parents","length","join","u_nodes","split","preselected_node","trim","node","Object","keys","sort","chosen_nodes","__optimal_path","nodes","local_nodes_in_best_paths","chosen_nodes2","push","nodes2","local_nodes_in_best_paths2","chosen_nodes3","nodes3","local_nodes_in_best_paths3","optimal_nodes","optimal_results","possible_path","value","nodeId","enhancementType","effectValue","entries","comparator","e","warn","optimal_result","includes","START","nodes_in_path","type1","type2","type3","count_chosen_nodes","values","filter","k","remaining_nodes","find_optimal_path_for_type","max_node_count","paths_to_consider","paths_weights","local_parents","shared_weight_between_siblings","find_paths","parent_node","dp_memo","build_dp_memo","possible_chosen_nodes","best_type1","undefined","path","calculate_parents","i","new_chosen_nodes","Array","from","Set","add","toString","type","max_length","left_nodes","other_paths","right_nodes","total_nodes","reduce","a","b","key","new_other_paths","handleNodes","event","setState","target","makeMap","id","tiles","handleChange","bind","handleSubmit","handleKeyPress","colours","sub","enhancementCellList","val","charaEnhancementCellId","pointX","pointY","paths","weight_of_node","steps_since_type","siblings","obj","this","children","name","other","parseInt","lines","borderColor","borderStyle","borderWidth","x0","y0","x1","y1","Y","X","colour","styleTop","position","left","top","borderBottomColor","styleMid","backgroundColor","textAlign","styleBot","borderTopColor","zIndex","style","className","createLines","boxes","createBox","opts","onChange","options","onKeyPress","createBoxes","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9620f7ac.chunk.js","sourcesContent":["import React from 'react';\nimport {Line} from 'react-lineto';\nimport data from './data/charaCard.json';\nimport \"./App.css\"\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.makeMap(data),\n            id: 3031,\n            tiles: 60,\n            type: \"ATTACK\",\n            u_id: 3031,\n            u_tiles: 10,\n            u_type1: \"ATTACK\",\n            u_type2: \"DEFENSE\",\n            u_type3: \"HP\",\n            u_nodes: \"\",\n            nodes_in_best_paths: {}\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n\n        this.colours = {\n            \"DEFENSE\": {[false]: \"#ccffff\", [true]: \"#00ccff\"},\n            \"HP\": {[false]: \"#936262\", [true]: \"#f00000\"},\n            \"ATTACK\": {[false]: \"#c8bf84\", [true]: \"#ffd22e\"},\n            \"START\": {[false]: \"#000000\", [true]: \"#000000\"},\n        }\n    }\n\n    makeMap(data) {\n        const dep = {};\n        const starts = {};\n        for (const [key, value] of Object.entries(data)) {\n            const sub = {};\n            let start = 0;\n            for (const val of Object.values(value.enhancementCellList)) {\n                sub[val.charaEnhancementCellId] = {\n                    ...val,\n                    pointX: 100 + (val.pointX - 1196) / 2 || 0,\n                    pointY: 200 + (val.pointY - 1048) / 3 || 0\n                }\n                if (val.enhancementType === \"START\") {\n                    start = val.charaEnhancementCellId\n                }\n            }\n            if (Object.keys(sub).length !== 0) {\n                dep[key] = sub\n                starts[key] = start\n            }\n        }\n        return {dep, starts};\n    }\n\n    optimal_path = () => {\n        const girl_id = this.state.u_id\n        const girl_se = this.state.data.dep[girl_id]\n        if (!girl_se) return \"Not defined\"\n        const start = performance.now();\n        const nodes_in_best_paths = {}\n        console.log(\"Making graph with \" + this.state.u_tiles + \" nodes for \" + girl_id + \" for types in order: \" + this.state.u_type1 + \", \" + this.state.u_type2 + \", \" + this.state.u_type3)\n\n        const parents = {}\n        const possible_best_paths = []\n        const special_nodes = []\n        for (const c_id of girl_se[this.state.data.starts[girl_id]].connectedCellIdList) {\n            this.find_parents(girl_id, c_id, parents, special_nodes)\n        }\n        console.log(\"\" + special_nodes.length + \" special nodes: \" + special_nodes.join(\", \"))\n        for (let preselected_node of this.state.u_nodes.split(\",\")) {\n            preselected_node = preselected_node.trim()\n            if (preselected_node in parents) {\n                let node = preselected_node\n                while (node) {\n                    nodes_in_best_paths[node] = true\n                    node = parents[node]\n                }\n            }\n        }\n        console.log(\"Preselected nodes: \", Object.keys(nodes_in_best_paths).sort().join(\", \"))\n        nodes_in_best_paths[this.state.data.starts[girl_id]] = true\n\n        const chosen_nodes = this.__optimal_path(girl_id, girl_se, nodes_in_best_paths, this.state.u_type1, this.state.u_type2, this.state.u_type3)\n        for (const nodes of chosen_nodes) {\n            const local_nodes_in_best_paths = {...nodes_in_best_paths}\n            for (const node of nodes) {\n                local_nodes_in_best_paths[node] = true\n            }\n            const chosen_nodes2 = this.__optimal_path(girl_id, girl_se, local_nodes_in_best_paths, this.state.u_type2, this.state.u_type1, this.state.u_type3)\n            if (chosen_nodes2.length === 0) {\n                possible_best_paths.push(local_nodes_in_best_paths)\n            }\n            for (const nodes2 of chosen_nodes2) {\n                const local_nodes_in_best_paths2 = {...local_nodes_in_best_paths}\n                for (const node2 of nodes2) {\n                    local_nodes_in_best_paths2[node2] = true\n                }\n                const chosen_nodes3 = this.__optimal_path(girl_id, girl_se, local_nodes_in_best_paths2, this.state.u_type3, this.state.u_type1, this.state.u_type2)\n                if (chosen_nodes3.length === 0) {\n                    possible_best_paths.push(local_nodes_in_best_paths2)\n                }\n                for (const nodes3 of chosen_nodes3) {\n                    const local_nodes_in_best_paths3 = {...local_nodes_in_best_paths2}\n                    for (const node3 of nodes3) {\n                        local_nodes_in_best_paths3[node3] = true\n                    }\n                    possible_best_paths.push(local_nodes_in_best_paths3)\n                }\n            }\n        }\n        const optimal_results = {}\n\n        for (const possible_path of possible_best_paths) {\n            const value = {[this.state.u_type1]: 0, [this.state.u_type2]: 0, [this.state.u_type3]: 0}\n            for (const nodeId of Object.keys(possible_path)) {\n                value[girl_se[nodeId].enhancementType] += (girl_se[nodeId].effectValue || 0)\n            }\n            optimal_results[Object.keys(possible_path).sort().join(\",\")] = value\n        }\n        let optimal_nodes\n        try {\n            optimal_nodes = Object.entries(optimal_results).sort(this.comparator(this.state.u_type1, this.state.u_type2, this.state.u_type3))[0][0].split(\",\")\n        } catch (e) {\n            console.warn(\"No valid paths found\")\n            optimal_nodes = []\n        }\n        const optimal_result = {}\n        let enhancementType, effectValue\n        for (const nodeId of optimal_nodes) {\n            nodes_in_best_paths[nodeId] = true\n            enhancementType = girl_se[nodeId].enhancementType\n            effectValue = enhancementType === \"SKILL\" || enhancementType.includes(\"DISK\") ? 1 : girl_se[nodeId].effectValue\n            if (enhancementType in optimal_result) {\n                optimal_result[enhancementType] += effectValue\n            } else {\n                optimal_result[enhancementType] = effectValue\n            }\n        }\n        delete optimal_result.START\n        console.log('It took ' + (performance.now() - start) + ' ms.');\n        console.log(\"Best result: \", optimal_result)\n        return nodes_in_best_paths\n    }\n\n    __optimal_path = (girl_id, girl_se, nodes_in_path, type1, type2, type3) => {\n        const count_chosen_nodes = Object.values(nodes_in_path).filter(k => k).length - 1 // remove start\n        const remaining_nodes = this.state.u_tiles - count_chosen_nodes\n        if (remaining_nodes === 0) {\n            return []\n        }\n        return this.find_optimal_path_for_type(girl_id, girl_se, nodes_in_path, type1, type2, type3, remaining_nodes)\n    }\n\n    find_optimal_path_for_type = (girl_id, girl_se, nodes_in_path, type1, type2, type3, max_node_count) => {\n        const paths_to_consider = []\n        const paths_weights = {}\n        const local_parents = {}\n        const shared_weight_between_siblings = {}\n        for (const c_id of girl_se[this.state.data.starts[girl_id]].connectedCellIdList) {\n            this.find_paths(girl_id, c_id, nodes_in_path, type1, paths_to_consider, paths_weights, [], 0, local_parents, shared_weight_between_siblings);\n        }\n\n        for (const node of Object.keys(paths_weights)) {\n            let parent_node = node\n            do {\n                parent_node = local_parents[parent_node]\n                if (parent_node in paths_weights) { // if parent is of type without any siblings showing up it can keep it's heuristic\n                    break\n                }\n                if (parent_node in shared_weight_between_siblings) {\n                    // TODO: Rather than remove the weight in all cases, remove it only if any other node with this as a parent is present in the set\n                    //  Not sure how, nor do I care to take the time. Would make the heuristic a bit better and improve time by reducing surplus iterations\n                    paths_weights[node] -= shared_weight_between_siblings[parent_node]\n                    if (paths_weights[node] < 0) {\n                        paths_weights[node] = 0\n                    }\n                }\n            } while (parent_node)\n        }\n\n        const dp_memo = {}\n        this.build_dp_memo(girl_se, type1, dp_memo, max_node_count, [], paths_to_consider, paths_weights)\n        const possible_chosen_nodes = []\n        let best_type1 = undefined\n        for (const [path, value] of Object.entries(dp_memo).sort(this.comparator(type1, type2, type3))) {\n            const nodes = this.calculate_parents(local_parents, path)\n            if (best_type1 && best_type1 > value[type1]) {\n                break\n            }\n            if (nodes.length <= max_node_count) {\n                possible_chosen_nodes.push(nodes)\n                best_type1 = value[type1]\n            }\n        }\n        for (let i = 0; i < possible_chosen_nodes.length; i++) {\n            for (const [path, _] of Object.entries(dp_memo).sort(this.comparator(type1, type2, type3))) {\n                const nodes = this.calculate_parents(local_parents, path)\n                const new_chosen_nodes = Array.from(new Set([...possible_chosen_nodes[i], ...nodes]))\n                if (new_chosen_nodes.length <= max_node_count) {\n                    possible_chosen_nodes[i] = new_chosen_nodes\n                }\n            }\n        }\n        console.log(\"dp_memo made for \" + type1 + \", considered \" + Object.keys(dp_memo).length + \" different combinations\")\n        return possible_chosen_nodes\n    }\n\n    find_paths(girl_id, node, nodes_in_path, type, paths, weight_of_node, path, steps_since_type, parents, siblings) {\n        const obj = this.state.data.dep[girl_id][node];\n        if (!obj) return;\n        steps_since_type++\n\n        if (node in nodes_in_path) {\n            steps_since_type = 0\n        } else if (obj.enhancementType === type) {\n            path = [...path, node]\n            paths.push(path.sort())\n            weight_of_node[node] = steps_since_type\n            steps_since_type = 0\n        }\n        const children = obj.connectedCellIdList\n        if (children) {\n            for (const c_id of children) {\n                if (steps_since_type > 0 && children.length > 1) { // Dont need to consider for branches that happen in a node of the wanted type\n                    siblings[c_id] = steps_since_type\n                }\n                if (!(node in nodes_in_path)) {\n                    parents[c_id] = node\n                }\n                this.find_paths(girl_id, c_id, nodes_in_path, type, paths, weight_of_node, path, steps_since_type, parents, siblings);\n            }\n        }\n    }\n\n    find_parents(girl_id, node, parents, special_nodes) {\n        const obj = this.state.data.dep[girl_id][node];\n        if (!obj) return;\n        const children = obj.connectedCellIdList\n        if (obj.enhancementType === \"SKILL\" || obj.enhancementType.includes(\"DISK\")) {\n            special_nodes.push(node)\n        }\n        if (children) {\n            for (const c_id of children) {\n                parents[c_id] = node\n                this.find_parents(girl_id, c_id, parents, special_nodes)\n            }\n        }\n    }\n\n    calculate_parents = (parents, path) => {\n        const nodes = new Set();\n        for (let node of path.split(\",\")) {\n            do {\n                nodes.add(node.toString())\n                node = parents[node]\n            } while (node)\n        }\n        return Array.from(nodes)\n    }\n\n    build_dp_memo = (girl_se, type, dp_memo, max_length, left_nodes, other_paths, paths_weights) => {\n        for (const right_nodes of other_paths) {\n            const total_nodes = Array.from(new Set([...left_nodes, ...right_nodes]))\n            if (total_nodes.reduce((a, b) => a + paths_weights[b], 0) > max_length) {\n                continue\n            }\n            const key = total_nodes.sort().join(\",\")\n            if (key in dp_memo) {\n                continue\n            }\n            const value = {[type]: 0}\n            for (const nodeId of total_nodes) {\n                value[girl_se[nodeId].enhancementType] += (girl_se[nodeId].effectValue || 0)\n            }\n            dp_memo[key] = value\n            const new_other_paths = other_paths.filter(path => path !== right_nodes)\n            this.build_dp_memo(girl_se, type, dp_memo, max_length, total_nodes, new_other_paths, paths_weights)\n        }\n    }\n\n    comparator = (type1, type2, type3) => (a, b) => {\n        if (a[1][type1] < b[1][type1]) return 1;\n        if (a[1][type1] > b[1][type1]) return -1;\n        if (a[1][type2] < b[1][type2]) return 1;\n        if (a[1][type2] > b[1][type2]) return -1;\n        if (a[1][type3] < b[1][type3]) return 1;\n        if (a[1][type3] > b[1][type3]) return -1;\n        return 0;\n    }\n\n    handleNodes = event => this.setState({u_nodes: event.target.value})\n\n    handleChange(event) {\n        if (event.target.type === \"select-one\") {\n            try {\n                if (event.target.name.includes(\"type\")) {\n                    const other = event.target.name === \"u_type1\" && event.target.value === this.state.u_type2 ?\n                        \"u_type2\" : \"u_type3\" // This is horrible but whatever\n                    this.setState({\n                        [other]: this.state[event.target.name],\n                        [event.target.name]: event.target.value\n                    }, () => this.handleSubmit(null));\n                } else {\n                    this.setState({\n                        [event.target.name]: event.target.value\n                    }, () => this.handleSubmit(null));\n                }\n            } catch (e) {\n            }\n        } else {\n            this.setState({[event.target.name]: event.target.value ? parseInt(event.target.value) : \"\"});\n        }\n    }\n\n    handleKeyPress(event) {\n        if (event.key === 'Enter') {\n            this.handleSubmit(null);\n        }\n    }\n\n    handleSubmit() {\n        if (this.state.data.dep[this.state.u_id]) {\n            this.setState({\n                id: this.state.u_id,\n                tiles: this.state.u_tiles,\n                nodes_in_best_paths: this.optimal_path()\n            })\n        } else {\n            this.setState({u_id: \"invalid\"})\n        }\n    }\n\n    createLines(key) {\n        const lines = []\n        const obj = this.state.data.dep[this.state.id][key];\n\n        if (obj.connectedCellIdList) {\n            for (const c_id of obj.connectedCellIdList) {\n                if (!this.state.data.dep[this.state.id][c_id]) {\n                    continue;\n                }\n                lines.push(\n                    <Line\n                        key={`${key}-${c_id}`}\n                        borderColor={this.state.nodes_in_best_paths[c_id] ? \"#ff0000\" : \"#723131\"}\n                        borderStyle={this.state.nodes_in_best_paths[c_id] ? \"solid\" : \"dashed\"}\n                        borderWidth={2}\n                        x0={obj.pointX + 26}\n                        y0={obj.pointY + 15}\n                        x1={this.state.data.dep[this.state.id][c_id].pointX + 26}\n                        y1={this.state.data.dep[this.state.id][c_id].pointY + 15}\n                    />)\n            }\n        }\n        return lines;\n    }\n\n    createBox(Y, X, key) {\n        const node = this.state.data.dep[this.state.id][key]\n        const colour = (this.colours[node.enhancementType]\n            || {[false]: \"#efe0f0\", [true]: \"#f99eff\"}\n        )[this.state.nodes_in_best_paths[key] || false]\n        const styleTop = {\n            position: \"absolute\",\n            left: X + \"px\",\n            top: Y - 15 + \"px\",\n            borderBottomColor: colour,\n        }\n        const styleMid = {\n            position: \"absolute\",\n            left: X + \"px\",\n            top: Y + \"px\",\n            backgroundColor: colour,\n            textAlign: \"center\"\n        }\n        const styleBot = {\n            position: \"absolute\",\n            left: X + \"px\",\n            top: Y + 30 + \"px\",\n            borderTopColor: colour,\n            zIndex: -1\n        }\n        return (\n            <div key={key}>\n                <div\n                    style={styleTop}\n                    className=\"hexagon-top\"\n                />\n                <div\n                    style={styleMid}\n                    className=\"hexagon\"\n                >\n                    {node.enhancementType !== \"SKILL\" && !node.enhancementType.includes(\"DISK\") ? node.effectValue : \"\"}\n                    <br/>\n                    {key}\n                </div>\n                <div\n                    style={styleBot}\n                    className=\"hexagon-bot\"\n                />\n                {this.createLines(key)}\n            </div>\n        );\n    };\n\n    createBoxes() {\n        const boxes = []\n        for (const [key, value] of Object.entries(this.state.data.dep[this.state.id])) {\n            boxes.push(\n                this.createBox(value.pointY, value.pointX, key)\n            )\n        }\n        return boxes;\n    }\n\n    options() {\n        const opts = []\n        for (const id of Object.keys(this.state.data.starts)) {\n            opts.push(<option key={id} value={id}>{id}</option>)\n        }\n        return opts;\n    }\n\n    render() {\n        return (\n            <div>\n                <label>\n                    ID:\n                    <select\n                        type=\"select\"\n                        name=\"u_id\"\n                        value={this.state.u_id}\n                        onChange={this.handleChange}\n                    >\n                        {this.options()}\n                    </select>\n                </label>\n                <label>\n                    Primary Type:\n                    <select\n                        value={this.state.u_type1}\n                        onChange={this.handleChange}\n                        name=\"u_type1\"\n                    >\n                        <option value=\"ATTACK\">Attack</option>\n                        <option value=\"HP\">HP</option>\n                        <option value=\"DEFENSE\">Defense</option>\n                    </select>\n                </label>\n                <label>\n                    Secondary Type:\n                    <select\n                        value={this.state.u_type2}\n                        onChange={this.handleChange}\n                        name=\"u_type2\"\n                    >\n                        {this.state.u_type1 !== \"ATTACK\" && <option value=\"ATTACK\">Attack</option>}\n                        {this.state.u_type1 !== \"HP\" && <option value=\"HP\">HP</option>}\n                        {this.state.u_type1 !== \"DEFENSE\" && <option value=\"DEFENSE\">Defense</option>}\n                    </select>\n                </label>\n                <label>\n                    Tertiary Type:\n                    <select\n                        value={this.state.u_type3}\n                        onChange={this.handleChange}\n                        name=\"u_type3\"\n                    >\n                        {this.state.u_type1 !== \"ATTACK\" && this.state.u_type2 !== \"ATTACK\" &&\n                        <option value=\"ATTACK\">Attack</option>}\n                        {this.state.u_type1 !== \"HP\" && this.state.u_type2 !== \"HP\" && <option value=\"HP\">HP</option>}\n                        {this.state.u_type1 !== \"DEFENSE\" && this.state.u_type2 !== \"DEFENSE\" &&\n                        <option value=\"DEFENSE\">Defense</option>}\n                    </select>\n                </label>\n                <label>\n                    Tiles:\n                    <input\n                        name=\"u_tiles\"\n                        type=\"number\"\n                        value={this.state.u_tiles}\n                        onChange={this.handleChange}\n                        onKeyPress={this.handleKeyPress}\n                    />\n                </label>\n                <label>\n                    Selected nodes:\n                    <input\n                        name=\"u_nodes\"\n                        type=\"text\"\n                        value={this.state.u_nodes}\n                        onChange={this.handleNodes}\n                        onKeyPress={this.handleKeyPress}\n                    />\n                </label>\n                <label>\n                    Free:\n                    {this.state.tiles - Object.values(this.state.nodes_in_best_paths).reduce((a, b) => a + b, 0) + 1}\n                </label>\n                <div className=\"boxContainer\">\n                    <div className=\"innerBox\">\n                        {this.createBoxes()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}