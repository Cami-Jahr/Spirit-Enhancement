{"version":3,"sources":["App.js","index.js"],"names":["App","props","optimal_path","girl_id","state","u_id","girl_se","data","dep","start","performance","now","nodes_in_best_paths","starts","console","log","u_tiles","u_type1","u_type2","u_type3","__optimal_path","enhancementType","effectValue","optimal_result","Object","keys","nodeId","includes","START","type1","type2","type3","count_chosen_nodes","values","filter","k","length","remaining_nodes","chosen_nodes","find_optimal_path_for_type","max_node_count","paths_to_consider","paths_weights","parents","shared_weight_between_siblings","connectedCellIdList","c_id","find_paths","node","parent_node","dp_memo","build_dp_memo","entries","sort","comparator","path","nodes","calculate_parents","new_chosen_nodes","Array","from","Set","split","add","toString","type","max_length","left_nodes","other_paths","right_nodes","total_nodes","reduce","a","b","key","join","value","new_other_paths","makeMap","id","tiles","handleChange","bind","handleSubmit","handleKeyPress","colours","sub","enhancementCellList","val","charaEnhancementCellId","pointX","pointY","paths","weight_of_node","steps_since_type","siblings","obj","this","push","children","event","target","name","other","setState","e","parseInt","lines","borderColor","borderStyle","borderWidth","x0","y0","x1","y1","Y","X","colour","styleTop","position","left","top","borderBottomColor","styleMid","backgroundColor","textAlign","styleBot","borderTopColor","zIndex","style","className","createLines","boxes","createBox","opts","onChange","options","onKeyPress","createBoxes","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61f9ac9e.chunk.js","sourcesContent":["import React from 'react';\nimport {Line} from 'react-lineto';\nimport data from './data/charaCard.json';\nimport \"./App.css\"\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.makeMap(data),\n            id: 3031,\n            tiles: 60,\n            type: \"ATTACK\",\n            u_id: 3031,\n            u_tiles: 10,\n            u_type1: \"ATTACK\",\n            u_type2: \"DEFENSE\",\n            u_type3: \"HP\",\n            nodes_in_best_paths: {}\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n\n        this.colours = {\n            \"DEFENSE\": {[false]: \"#ccffff\", [true]: \"#00ccff\"},\n            \"HP\": {[false]: \"#936262\", [true]: \"#f00000\"},\n            \"ATTACK\": {[false]: \"#c8bf84\", [true]: \"#ffd22e\"},\n            \"START\": {[false]: \"#000000\", [true]: \"#000000\"},\n        }\n    }\n\n    makeMap(data) {\n        let dep = {};\n        let starts = {};\n        for (let [key, value] of Object.entries(data)) {\n            let sub = {};\n            let start = 0;\n            for (let val of Object.values(value.enhancementCellList)) {\n                sub[val.charaEnhancementCellId] = {\n                    ...val,\n                    pointX: 100 + (val.pointX - 1196) / 2 || 0,\n                    pointY: 200 + (val.pointY - 1048) / 3 || 0\n                }\n                if (val.enhancementType === \"START\") {\n                    start = val.charaEnhancementCellId\n                }\n            }\n            if (Object.keys(sub).length !== 0) {\n                dep[key] = sub\n                starts[key] = start\n            }\n        }\n        return {dep, starts};\n    }\n\n    optimal_path = () => {\n        const girl_id = this.state.u_id\n        const girl_se = this.state.data.dep[girl_id]\n        if (!girl_se) return \"Not defined\"\n        const start = performance.now();\n        const nodes_in_best_paths = {[this.state.data.starts[girl_id]]: true}\n        console.log(\"Making graph with \" + this.state.u_tiles + \" nodes for \" + girl_id + \" for types in order: \" + this.state.u_type1 + \", \" + this.state.u_type2 + \", \" + this.state.u_type3)\n\n        this.__optimal_path(girl_id, girl_se, nodes_in_best_paths, this.state.u_type1, this.state.u_type2, this.state.u_type3)\n        this.__optimal_path(girl_id, girl_se, nodes_in_best_paths, this.state.u_type2, this.state.u_type1, this.state.u_type3)\n        this.__optimal_path(girl_id, girl_se, nodes_in_best_paths, this.state.u_type3, this.state.u_type1, this.state.u_type2)\n\n        console.log('It took ' + (performance.now() - start) + ' ms.');\n        const optimal_result = {}\n        let enhancementType, effectValue\n        for (const nodeId of Object.keys(nodes_in_best_paths)) {\n            enhancementType = girl_se[nodeId].enhancementType\n            effectValue = enhancementType === \"SKILL\" || enhancementType.includes(\"DISK\") ? 1 : girl_se[nodeId].effectValue\n            if (enhancementType in optimal_result) {\n                optimal_result[enhancementType] += effectValue\n            } else {\n                optimal_result[enhancementType] = effectValue\n            }\n        }\n        delete optimal_result.START\n        console.log(\"Best result: \", optimal_result)\n        return nodes_in_best_paths\n    }\n\n    __optimal_path = (girl_id, girl_se, nodes_in_best_paths, type1, type2, type3) => {\n        const count_chosen_nodes = Object.values(nodes_in_best_paths).filter(k => k).length - 1 // remove start\n        const remaining_nodes = this.state.u_tiles - count_chosen_nodes\n        if (remaining_nodes === 0) {\n            return\n        }\n        const chosen_nodes = this.find_optimal_path_for_type(girl_id, girl_se, type1, type2, type3, remaining_nodes)\n\n        for (const node of chosen_nodes) {\n            nodes_in_best_paths[node] = true\n        }\n    }\n\n    find_optimal_path_for_type = (girl_id, girl_se, type1, type2, type3, max_node_count) => {\n        const paths_to_consider = []\n        const paths_weights = {}\n        const parents = {}\n        const shared_weight_between_siblings = {}\n        for (let c_id of girl_se[this.state.data.starts[girl_id]].connectedCellIdList) {\n            this.find_paths(girl_id, c_id, type1, paths_to_consider, paths_weights, [], 0, parents, shared_weight_between_siblings);\n        }\n\n        for (const node of Object.keys(paths_weights)) {\n            let parent_node = node\n            do {\n                parent_node = parents[parent_node]\n                if (parent_node in paths_weights) { // if parent is of type without any siblings showing up it can keep it's heuristic\n                    break\n                }\n                if (parent_node in shared_weight_between_siblings) {\n                    // TODO: Rather than remove the weight in all cases, remove it only if any other node with this as a parent is present in the set\n                    //  Not sure how, nor do I care to take the time. Would make the heuristic a bit better and improve time by reducing surplus iterations\n                    paths_weights[node] -= shared_weight_between_siblings[parent_node]\n                    if (paths_weights[node] < 0) {\n                        paths_weights[node] = 0\n                    }\n                }\n            } while (parent_node)\n        }\n\n        const dp_memo = {}\n        this.build_dp_memo(girl_se, type1, dp_memo, max_node_count, [], paths_to_consider, paths_weights)\n        let chosen_nodes = []\n        for (let [path, _] of Object.entries(dp_memo).sort(this.comparator(type1, type2, type3))) {\n            const nodes = this.calculate_parents(parents, path)\n            const new_chosen_nodes = Array.from(new Set([...chosen_nodes, ...nodes]))\n            if (new_chosen_nodes.length <= max_node_count) {\n                chosen_nodes = new_chosen_nodes\n                break\n            }\n        }\n        console.log(\"dp_memo made for \" + type1 + \", considered \" + Object.keys(dp_memo).length + \" different combinations\")\n        return chosen_nodes\n    }\n\n    find_paths(girl_id, node, type, paths, weight_of_node, path, steps_since_type, parents, siblings) {\n        let obj = this.state.data.dep[girl_id][node];\n        if (!obj) return;\n        steps_since_type++\n\n        if (obj.enhancementType === type) {\n            path = [...path, node]\n            paths.push(path.sort())\n            weight_of_node[node] = steps_since_type\n            steps_since_type = 0\n        }\n        const children = obj.connectedCellIdList\n        if (children) {\n            for (let c_id of children) {\n                if (steps_since_type > 0 && children.length > 1) { // Dont need to consider for branches that happen in a node of the wanted type\n                    siblings[c_id] = steps_since_type\n                }\n                parents[c_id] = node\n                this.find_paths(girl_id, c_id, type, paths, weight_of_node, path, steps_since_type, parents, siblings);\n            }\n        }\n    }\n\n    calculate_parents = (parents, path) => {\n        const nodes = new Set();\n        for (let node of path.split(\",\")) {\n            do {\n                nodes.add(node.toString())\n                node = parents[node]\n            } while (node)\n        }\n        return Array.from(nodes)\n    }\n\n    build_dp_memo = (girl_se, type, dp_memo, max_length, left_nodes, other_paths, paths_weights) => {\n        for (const right_nodes of other_paths) {\n            const total_nodes = Array.from(new Set([...left_nodes, ...right_nodes]))\n            if (total_nodes.reduce((a, b) => a + paths_weights[b], 0) > max_length) {\n                continue\n            }\n            const key = total_nodes.sort().join(\",\")\n            if (key in dp_memo) {\n                continue\n            }\n            const value = {[type]: 0}\n            for (const nodeId of total_nodes) {\n                value[girl_se[nodeId].enhancementType] += (girl_se[nodeId].effectValue || 0)\n            }\n            dp_memo[key] = value\n            const new_other_paths = other_paths.filter(path => path !== right_nodes)\n            this.build_dp_memo(girl_se, type, dp_memo, max_length, total_nodes, new_other_paths, paths_weights)\n        }\n    }\n\n    comparator = (type1, type2, type3) => (a, b) => {\n        if (a[1][type1] < b[1][type1]) return 1;\n        if (a[1][type1] > b[1][type1]) return -1;\n        if (a[1][type2] < b[1][type2]) return 1;\n        if (a[1][type2] > b[1][type2]) return -1;\n        if (a[1][type3] < b[1][type3]) return 1;\n        if (a[1][type3] > b[1][type3]) return -1;\n        return 0;\n    }\n\n    handleChange(event) {\n        if (event.target.type === \"select-one\") {\n            try {\n                if (event.target.name.includes(\"type\")) {\n                    const other = event.target.name === \"u_type1\" && event.target.value === this.state.u_type2 ?\n                        \"u_type2\" : \"u_type3\" // This is horrible but whatever\n                    this.setState({\n                        [other]: this.state[event.target.name],\n                        [event.target.name]: event.target.value\n                    }, () => this.handleSubmit(null));\n                } else {\n                    this.setState({\n                        [event.target.name]: event.target.value\n                    }, () => this.handleSubmit(null));\n                }\n            } catch (e) {\n            }\n        } else {\n            this.setState({[event.target.name]: event.target.value ? parseInt(event.target.value) : \"\"});\n        }\n    }\n\n    handleKeyPress(event) {\n        if (event.key === 'Enter') {\n            this.handleSubmit(null);\n        }\n    }\n\n    handleSubmit() {\n        if (this.state.data.dep[this.state.u_id]) {\n            this.setState({\n                id: this.state.u_id,\n                tiles: this.state.u_tiles,\n                nodes_in_best_paths: this.optimal_path()\n            })\n        } else {\n            this.setState({u_id: \"invalid\"})\n        }\n    }\n\n    createLines(key) {\n        const lines = []\n        let obj = this.state.data.dep[this.state.id][key];\n\n        if (obj.connectedCellIdList) {\n            for (let c_id of obj.connectedCellIdList) {\n                if (!this.state.data.dep[this.state.id][c_id]) {\n                    continue;\n                }\n                lines.push(\n                    <Line\n                        key={`${key}-${c_id}`}\n                        borderColor={this.state.nodes_in_best_paths[c_id] ? \"#ff0000\" : \"#723131\"}\n                        borderStyle={this.state.nodes_in_best_paths[c_id] ? \"solid\" : \"dashed\"}\n                        borderWidth={2}\n                        x0={obj.pointX + 26}\n                        y0={obj.pointY + 15}\n                        x1={this.state.data.dep[this.state.id][c_id].pointX + 26}\n                        y1={this.state.data.dep[this.state.id][c_id].pointY + 15}\n                    />)\n            }\n        }\n        return lines;\n    }\n\n    createBox(Y, X, key) {\n        const node = this.state.data.dep[this.state.id][key]\n        let colour = (this.colours[node.enhancementType]\n            || {[false]: \"#efe0f0\", [true]: \"#f99eff\"}\n        )[this.state.nodes_in_best_paths[key] || false]\n        const styleTop = {\n            position: \"absolute\",\n            left: X + \"px\",\n            top: Y - 15 + \"px\",\n            borderBottomColor: colour,\n        }\n        const styleMid = {\n            position: \"absolute\",\n            left: X + \"px\",\n            top: Y + \"px\",\n            backgroundColor: colour,\n            textAlign: \"center\"\n        }\n        const styleBot = {\n            position: \"absolute\",\n            left: X + \"px\",\n            top: Y + 30 + \"px\",\n            borderTopColor: colour,\n            zIndex: -1\n        }\n        return (\n            <div key={key}>\n                <div\n                    style={styleTop}\n                    className=\"hexagon-top\"\n                />\n                <div\n                    style={styleMid}\n                    className=\"hexagon\"\n                >\n                    {node.enhancementType !== \"SKILL\" && !node.enhancementType.includes(\"DISK\") ? node.effectValue : \"\"}\n                    <br/>\n                    {key}\n                </div>\n                <div\n                    style={styleBot}\n                    className=\"hexagon-bot\"\n                />\n                {this.createLines(key)}\n            </div>\n        );\n    };\n\n    createBoxes() {\n        const boxes = []\n        for (let [key, value] of Object.entries(this.state.data.dep[this.state.id])) {\n            boxes.push(\n                this.createBox(value.pointY, value.pointX, key)\n            )\n        }\n        return boxes;\n    }\n\n    options() {\n        const opts = []\n        for (let id of Object.keys(this.state.data.starts)) {\n            opts.push(<option key={id} value={id}>{id}</option>)\n        }\n        return opts;\n    }\n\n    render() {\n        return (\n            <div>\n                <label>\n                    ID:\n                    <select\n                        type=\"select\"\n                        name=\"u_id\"\n                        value={this.state.u_id}\n                        onChange={this.handleChange}\n                    >\n                        {this.options()}\n                    </select>\n                </label>\n                <label>\n                    Primary Type:\n                    <select\n                        value={this.state.u_type1}\n                        onChange={this.handleChange}\n                        name=\"u_type1\"\n                    >\n                        <option value=\"ATTACK\">Attack</option>\n                        <option value=\"HP\">HP</option>\n                        <option value=\"DEFENSE\">Defense</option>\n                    </select>\n                </label>\n                <label>\n                    Secondary Type:\n                    <select\n                        value={this.state.u_type2}\n                        onChange={this.handleChange}\n                        name=\"u_type2\"\n                    >\n                        {this.state.u_type1 !== \"ATTACK\" && <option value=\"ATTACK\">Attack</option>}\n                        {this.state.u_type1 !== \"HP\" && <option value=\"HP\">HP</option>}\n                        {this.state.u_type1 !== \"DEFENSE\" && <option value=\"DEFENSE\">Defense</option>}\n                    </select>\n                </label>\n                <label>\n                    Tertiary Type:\n                    <select\n                        value={this.state.u_type3}\n                        onChange={this.handleChange}\n                        name=\"u_type3\"\n                    >\n                        {this.state.u_type1 !== \"ATTACK\" && this.state.u_type2 !== \"ATTACK\" &&\n                        <option value=\"ATTACK\">Attack</option>}\n                        {this.state.u_type1 !== \"HP\" && this.state.u_type2 !== \"HP\" && <option value=\"HP\">HP</option>}\n                        {this.state.u_type1 !== \"DEFENSE\" && this.state.u_type2 !== \"DEFENSE\" &&\n                        <option value=\"DEFENSE\">Defense</option>}\n                    </select>\n                </label>\n                <label>\n                    Tiles:\n                    <input\n                        name=\"u_tiles\"\n                        type=\"number\"\n                        value={this.state.u_tiles}\n                        onChange={this.handleChange}\n                        onKeyPress={this.handleKeyPress}\n                    />\n                </label>\n                <label>\n                    Free:\n                    {this.state.tiles - Object.values(this.state.nodes_in_best_paths).reduce((a, b) => a + b, 0) + 1}\n                </label>\n                <div className=\"boxContainer\">\n                    <div className=\"innerBox\">\n                        {this.createBoxes()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}