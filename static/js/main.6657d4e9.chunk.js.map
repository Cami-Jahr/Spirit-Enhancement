{"version":3,"sources":["App.js","index.js"],"names":["App","props","comparator","a","b","state","u_type1","u_type2","u_type3","calculateGain","charInfo","original_memo","nodes_in_best_paths","map","path","path_gain","new_nodes_in_path","filter","nodeId","remaining_values","ATTACK","DEFENSE","HP","forEach","enhancementType","effectValue","Object","entries","type","value","length","addBestBranch","memo","path_was_added","sort","values","reduce","countArrayEntriesNotInObject","u_tiles","p","build_dp_memo","girl_se","dp_memo","left_nodes","other_paths","right_nodes","total_nodes","Array","from","Set","key","join","new_other_paths","dp_comparator","optimal_path","id","data","dep","paths","starts","connectedCellIdList","c_id","find_paths","paths_to_consider","split","chosen_nodes","nodes","new_chosen_nodes","makeMap","tiles","u_id","handleChange","bind","handleSubmit","handleKeyPress","colours","sub","start","enhancementCellList","val","charaEnhancementCellId","pointX","pointY","keys","obj","array","c","this","weight_and_memo","memory","path_to_value","node","should_evalute_in_pathfinding","event","target","setState","name","e","parseInt","u_type","lines","push","borderColor","borderStyle","borderWidth","x0","y0","x1","y1","Y","X","colour","styleTop","position","left","top","borderBottomColor","styleMid","backgroundColor","textAlign","styleBot","borderTopColor","style","className","includes","createLines","boxes","createBox","opts","onChange","options","onKeyPress","createBoxes","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6657d4e9.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from 'react-lineto';\nimport data from './data/charaCard.json';\nimport \"./App.css\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: this.makeMap(data),\n      id: 3031,\n      tiles: 60,\n      type: \"ATTACK\",\n      u_id: 3031,\n      u_tiles: 10,\n      u_type1: \"ATTACK\",\n      u_type2: \"DEFENSE\",\n      u_type3: \"DEFENSE\",\n      nodes_in_best_paths: {}\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n\n    this.colours = {\n      \"DEFENSE\": {[false]:\"#ccffff\", [true]:\"#00ccff\"},\n      \"HP\": {[false]:\"#936262\", [true]:\"#f00000\"},\n      \"ATTACK\": {[false]:\"#c8bf84\", [true]:\"#ffd22e\"},\n      \"START\": {[false]:\"#000000\", [true]:\"#000000\"},\n    }\n  }\n\n  makeMap (data) {\n    let dep = {};\n    let starts = {};\n    for (let [key, value] of Object.entries(data)) {\n      let sub = {};\n      let start = 0;\n\n      for (let val of Object.values(value.enhancementCellList)) {\n        sub[val.charaEnhancementCellId] = {\n          ...val,\n          pointX: 100 + (val.pointX-1196) / 2 || 0,\n          pointY: 200 + (val.pointY-1048) / 3 || 0\n        }\n\n        if (val.enhancementType === \"START\") {\n          start = val.charaEnhancementCellId\n        }\n      }\n\n      if (Object.keys(sub).length !== 0){\n        dep[key] = sub\n        starts[key] = start\n      }\n    }\n\n    return {dep, starts};\n  }\n\n  comparator = (a, b) => {\n    if (a[0][this.state.u_type1] < b[0][this.state.u_type1]) return 1;\n    if (a[0][this.state.u_type1] > b[0][this.state.u_type1]) return -1;\n    if (a[0][this.state.u_type2] < b[0][this.state.u_type2]) return 1;\n    if (a[0][this.state.u_type2] > b[0][this.state.u_type2]) return -1;\n    if (a[0][this.state.u_type3] < b[0][this.state.u_type3]) return 1;\n    if (a[0][this.state.u_type3] > b[0][this.state.u_type3]) return -1;\n    return 0;\n  }\n\n  countArrayEntriesNotInObject (obj, array) {\n    let c = 0\n    for (let n of array) {\n      c += !obj[n]\n    }\n    return c;\n  }\n\n  calculateGain = (charInfo, original_memo, nodes_in_best_paths) => {\n    const balanced_memo = original_memo.map(path => {\n      const path_gain = {}\n      const new_nodes_in_path = path.filter(nodeId => !nodes_in_best_paths[nodeId])\n      const remaining_values = {ATTACK: 0, DEFENSE: 0, HP: 0}\n      new_nodes_in_path.forEach(nodeId => {\n        remaining_values[charInfo[nodeId].enhancementType] = (charInfo[nodeId].effectValue || 0)\n      });\n      Object.entries(remaining_values).map(([type, value]) => {path_gain[type] = value / new_nodes_in_path.length})\n      return [path_gain, path]\n    })\n    return balanced_memo\n  }\n\n  addBestBranch = (memo, nodes_in_best_paths) => {\n    let path_was_added\n    for (let [_, path] of memo.sort(this.comparator)) {\n      if (Object.values(nodes_in_best_paths).reduce((a, b) => a + b, 0) + this.countArrayEntriesNotInObject(nodes_in_best_paths, path) <= this.state.u_tiles + 1) {\n        path_was_added = false\n        for (let p of path) {\n          if(!nodes_in_best_paths[p]) {\n            path_was_added = true\n            nodes_in_best_paths[p] = true\n          }\n        }\n        if(path_was_added) {\n          return path;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Greedy approach for calculating on the fly best paths\n   */\n  best_path (id, type) {\n    if (!this.state.data.dep[id]) return \"Not defined\"\n    let memory = []\n    const nodes_in_best_paths = {[this.state.data.starts[id]]: true}\n\n    for (let c_id of this.state.data.dep[id][this.state.data.starts[id]].connectedCellIdList) {\n      this.find_paths(id, c_id, type, memory, nodes_in_best_paths, []);\n    }\n\n    let weight_and_memo, chosen_path\n    while (true) {\n      weight_and_memo = this.calculateGain(this.state.data.dep[id], memory, nodes_in_best_paths)\n      chosen_path = this.addBestBranch(weight_and_memo, nodes_in_best_paths)\n      if(!chosen_path) break;\n      memory = memory.filter(path_to_value => {\n        for (const nodeId of path_to_value) {\n          if(!nodes_in_best_paths[nodeId]){\n            return true\n          }\n        }\n        return false\n      })\n    }\n\n    return nodes_in_best_paths;\n  }\n\n  build_dp_memo = (girl_se, dp_memo, left_nodes, other_paths) => {\n    for (const right_nodes of other_paths) {\n      const total_nodes = Array.from(new Set([...left_nodes, ...right_nodes]))\n      if(total_nodes.length > this.state.u_tiles) {\n        continue\n      }\n      const key = total_nodes.sort().join(\",\")\n      if (key in dp_memo) {\n        continue\n      }\n      const value = {ATTACK: 0, DEFENSE: 0, HP: 0}\n      for (const nodeId of total_nodes) {\n        value[girl_se[nodeId].enhancementType] += (girl_se[nodeId].effectValue || 0)\n      }\n      dp_memo[key] = value\n      const new_other_paths = other_paths.filter(path => path !== right_nodes)\n      this.build_dp_memo(girl_se, dp_memo, total_nodes, new_other_paths)\n    }\n}\n\n  dp_comparator = (a, b) => {\n    if (a[1][this.state.u_type1] < b[1][this.state.u_type1]) return 1;\n    if (a[1][this.state.u_type1] > b[1][this.state.u_type1]) return -1;\n    if (a[1][this.state.u_type2] < b[1][this.state.u_type2]) return 1;\n    if (a[1][this.state.u_type2] > b[1][this.state.u_type2]) return -1;\n    if (a[1][this.state.u_type3] < b[1][this.state.u_type3]) return 1;\n    if (a[1][this.state.u_type3] > b[1][this.state.u_type3]) return -1;\n    return 0;\n  }\n\n  /**\n   * DP approach, finds optimal solution\n   */\n  optimal_path = (id, type) => {\n    const girl_se = this.state.data.dep[id]\n    if (!girl_se) return \"Not defined\"\n    let paths = {}\n    const nodes_in_best_paths = {[this.state.data.starts[id]]: true}\n\n    for (let c_id of girl_se[this.state.data.starts[id]].connectedCellIdList) {\n      this.find_paths(id, c_id, type, paths, nodes_in_best_paths, []);\n    }\n    const paths_to_consider = Object.entries(paths)\n        .filter(([_, shouldTake]) => shouldTake)\n        .map(([path, _]) => path.split(\",\"))\n\n    const dp_memo = {}\n    this.build_dp_memo(girl_se, dp_memo, [], paths_to_consider)\n\n    let chosen_nodes = []\n    for (let [path, _] of Object.entries(dp_memo).sort(this.dp_comparator)) {\n      const nodes = path.split(\",\");\n      const new_chosen_nodes = Array.from(new Set([...chosen_nodes, ...nodes]))\n      if(new_chosen_nodes.length <= this.state.u_tiles) {\n        chosen_nodes = new_chosen_nodes\n      }\n    }\n    for (const chosenNode of chosen_nodes) {\n      nodes_in_best_paths[chosenNode] = true\n    }\n    return nodes_in_best_paths\n  }\n\n  find_paths (id, node, type, memo, nodes_in_best_paths, path=[]) {\n    let obj = this.state.data.dep[id][node];\n    if(!obj) return;\n    nodes_in_best_paths[node] = false\n\n    const should_evalute_in_pathfinding = obj.enhancementType === this.state.u_type1\n        //|| obj.enhancementType === this.state.u_type2 // Also considering this adds significant time\n    path = [...path, node]\n    memo[path.sort().join(\",\")] = should_evalute_in_pathfinding\n\n    if (obj.connectedCellIdList) {\n      for (let c_id of obj.connectedCellIdList) {\n        this.find_paths(id, c_id, type, memo, nodes_in_best_paths, path);\n      }\n    }\n  }\n\n  handleChange(event) {\n    if (event.target.type === \"select-one\"){\n      try{\n        this.setState({\n          [event.target.name]: event.target.value\n        }, () => this.handleSubmit(null));\n      } catch (e) { }\n    } else {\n      this.setState({[event.target.name]: event.target.value ? parseInt(event.target.value) : \"\"});\n    }\n  }\n\n  handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      this.handleSubmit(null);\n    }\n  }\n\n  handleSubmit(event) {\n    if(this.state.data.dep[this.state.u_id]) {\n      this.setState({id: this.state.u_id, type: this.state.u_type, tiles: this.state.u_tiles, nodes_in_best_paths: this.optimal_path(this.state.u_id, this.state.u_type)})\n    } else {\n      this.setState({u_id: \"invalid\"})\n    }\n    //event.preventDefault();\n  }\n\n  createLines(key) {\n    const lines = []\n    let obj = this.state.data.dep[this.state.id][key];\n\n    if (obj.connectedCellIdList) {\n      for (let c_id of obj.connectedCellIdList) {\n        if(!this.state.data.dep[this.state.id][c_id]) continue;\n        lines.push(<Line key={`${key}-${c_id}`}\n                         borderColor={this.state.nodes_in_best_paths[c_id] ? \"#ff0000\": \"#723131\"}\n                         borderStyle={this.state.nodes_in_best_paths[c_id] ? \"solid\": \"dashed\"}\n                         borderWidth={2}\n                         x0={obj.pointX + 26}\n                         y0={obj.pointY + 15}\n                         x1={this.state.data.dep[this.state.id][c_id].pointX + 26}\n                         y1={this.state.data.dep[this.state.id][c_id].pointY + 15}\n        />)\n      }\n    }\n    return lines;\n  }\n\n  createBox(Y, X, key) {\n    const node = this.state.data.dep[this.state.id][key]\n    let colour = (this.colours[node.enhancementType]|| {[false]:\"#efe0f0\", [true]:\"#f99eff\"})[this.state.nodes_in_best_paths[key]]\n    const styleTop = {\n      position: \"absolute\",\n      left: X + \"px\",\n      top: Y - 15 + \"px\",\n      borderBottomColor: colour,\n    }\n    const styleMid = {\n      position: \"absolute\",\n      left: X + \"px\",\n      top: Y + \"px\",\n      backgroundColor: colour,\n      textAlign: \"center\"\n    }\n    const styleBot = {\n      position: \"absolute\",\n      left: X + \"px\",\n      top: Y + 30 + \"px\",\n      borderTopColor: colour,\n    }\n    return (\n        <div key={key}>\n          <div\n              style={styleTop}\n              className=\"hexagon-top\"\n          />\n          <div\n              style={styleMid}\n              className=\"hexagon\"\n          >\n            {node.enhancementType !== \"SKILL\" && !node.enhancementType.includes(\"DISK\") ? node.effectValue : \"\"}\n          </div>\n          <div\n              style={styleBot}\n              className=\"hexagon-bot\"\n          />\n          {this.createLines(key)}\n        </div>\n    );\n  };\n\n  createBoxes () {\n    const boxes = []\n    for (let [key, value] of Object.entries(this.state.data.dep[this.state.id])) {\n      boxes.push(\n          this.createBox(value.pointY, value.pointX, key)\n      )\n    }\n    return boxes;\n  }\n\n  options() {\n    const opts = []\n    for (let id of Object.keys(this.state.data.starts)){\n      opts.push(<option key={id} value={id}>{id}</option>)\n    }\n    return opts;\n  }\n\n  render() {\n    return (\n        <div>\n          <label>\n            ID:\n            <select\n                type=\"select\"\n                name=\"u_id\"\n                value={this.state.u_id}\n                onChange={this.handleChange}\n            >\n              {this.options()}\n            </select>\n          </label>\n          <label>\n            Primary Type:\n            <select\n                value={this.state.u_type1}\n                onChange={this.handleChange}\n                name=\"u_type1\"\n            >\n              <option value=\"ATTACK\">Attack</option>\n              <option value=\"HP\">HP</option>\n              <option value=\"DEFENSE\">Defense</option>\n            </select>\n          </label>\n          <label>\n            Secondary Type:\n            <select\n                value={this.state.u_type2}\n                onChange={this.handleChange}\n                name=\"u_type2\"\n            >\n              {this.state.u_type1 !== \"ATTACK\" && <option value=\"ATTACK\">Attack</option>}\n              {this.state.u_type1 !== \"HP\" && <option value=\"HP\">HP</option>}\n              {this.state.u_type1 !== \"DEFENSE\" && <option value=\"DEFENSE\">Defense</option>}\n            </select>\n          </label>\n          <label>\n            Tertiary Type:\n            <select\n                value={this.state.u_type3}\n                onChange={this.handleChange}\n                name=\"u_type3\"\n            >\n              {this.state.u_type1 !== \"ATTACK\" && this.state.u_type2 !== \"ATTACK\" && <option value=\"ATTACK\">Attack</option>}\n              {this.state.u_type1 !== \"HP\" && this.state.u_type2 !== \"HP\" && <option value=\"HP\">HP</option>}\n              {this.state.u_type1 !== \"DEFENSE\" && this.state.u_type2 !== \"DEFENSE\" && <option value=\"DEFENSE\">Defense</option>}\n            </select>\n          </label>\n          <label>\n            Tiles:\n            <input\n                name=\"u_tiles\"\n                type=\"number\"\n                value={this.state.u_tiles}\n                onChange={this.handleChange}\n                onKeyPress={this.handleKeyPress}\n            />\n          </label>\n          <label>\n            Free:\n            {this.state.tiles - Object.values(this.state.nodes_in_best_paths).reduce((a, b) => a + b, 0) + 1}\n          </label>\n          <div className=\"boxContainer\">\n            <div className=\"innerBox\">\n              {this.createBoxes()}\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}